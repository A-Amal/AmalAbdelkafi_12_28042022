{"ast":null,"code":"var _s = $RefreshSig$();\n\n//const {currentUser, apiUrl, mockData, simDataLoadingTime} = config\nimport { createContext, useEffect, useState } from \"react\";\nimport { USER_MAIN_DATA as usersMocked, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../src/dataMocked';\nconst mockData = false;\nlet currentUser = 12;\nlet apiUrl;\n/**\r\n * Context\r\n */\n\nexport const DashboardContext = /*#__PURE__*/createContext();\n\nfunction DashboardContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n\n  /**\r\n   * State\r\n   */\n  const [user, setUser] = useState(12);\n  const [activity, setActivity] = useState();\n  const [averageSessions, setAverageSessions] = useState();\n  const [performance, setPerformance] = useState();\n  const [performanceKind, setPerformanceKind] = useState();\n  const [apiError, setApiError] = useState(false);\n  /**\r\n   * Get user data\r\n   */\n\n  const getUser = () => {\n    if (!mockData) fetch(`${apiUrl}/user/${currentUser}`).then(response => response.json()).then(data => setUser(data.data)).catch(error => setApiError(true));else setUser(usersMocked.find(item => item.id === currentUser));\n  };\n\n  useEffect(() => {\n    getUser();\n    console.log(user);\n  }, []);\n}\n\n_s(DashboardContextProvider, \"E5U1RzC/uqN0Oc9unWyqOAtKEp4=\");\n\n_c = DashboardContextProvider;\nexport default DashboardContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardContextProvider\");","map":{"version":3,"sources":["D:/fomation Openclassroom/projet12/SportSee/src/dashboardContext.js"],"names":["createContext","useEffect","useState","USER_MAIN_DATA","usersMocked","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","mockData","currentUser","apiUrl","DashboardContext","DashboardContextProvider","children","user","setUser","activity","setActivity","averageSessions","setAverageSessions","performance","setPerformance","performanceKind","setPerformanceKind","apiError","setApiError","getUser","fetch","then","response","json","data","catch","error","find","item","id","console","log"],"mappings":";;AAAA;AACA,SAAQA,aAAR,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,cAAc,IAAIC,WAA1B,EAAuCC,aAAvC,EAAsDC,qBAAtD,EAA6EC,gBAA7E,QAAqG,mBAArG;AAEA,MAAMC,QAAQ,GAAG,KAAjB;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,MAAJ;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,gBAAGX,aAAa,EAAtC;;AACP,SAASY,wBAAT,OAA8C;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;;AAC1C;AACJ;AACA;AACI,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,EAAxC;AACA,QAAM,CAACgB,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,EAAtD;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,EAA9C;AACA,QAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,EAAtD;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,KAAD,CAAxC;AACA;AACJ;AACA;;AACI,QAAMwB,OAAO,GAAG,MAAM;AAClB,QAAI,CAAClB,QAAL,EAAemB,KAAK,CAAE,GAAEjB,MAAO,SAAQD,WAAY,EAA/B,CAAL,CACVmB,IADU,CACJC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADR,EAEVF,IAFU,CAELG,IAAI,IAAIhB,OAAO,CAACgB,IAAI,CAACA,IAAN,CAFV,EAGVC,KAHU,CAGHC,KAAD,IAAWR,WAAW,CAAC,IAAD,CAHlB,EAAf,KAIKV,OAAO,CAACX,WAAW,CAAC8B,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAY3B,WAAvC,CAAD,CAAP;AACR,GAND;;AAQAR,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,OAAO;AACPW,IAAAA,OAAO,CAACC,GAAR,CAAYxB,IAAZ;AACH,GAHQ,EAGN,EAHM,CAAT;AAIH;;GAzBQF,wB;;KAAAA,wB;AA0BT,eAAeD,gBAAf","sourcesContent":["//const {currentUser, apiUrl, mockData, simDataLoadingTime} = config\r\nimport {createContext, useEffect, useState} from \"react\";\r\nimport {USER_MAIN_DATA as usersMocked, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../src/dataMocked'\r\n\r\nconst mockData = false;\r\nlet currentUser = 12;\r\nlet apiUrl;\r\n/**\r\n * Context\r\n */\r\nexport const DashboardContext = createContext()\r\nfunction DashboardContextProvider({children}) {\r\n    /**\r\n     * State\r\n     */\r\n    const [user, setUser] = useState(12)\r\n    const [activity, setActivity] = useState()\r\n    const [averageSessions, setAverageSessions] = useState()\r\n    const [performance, setPerformance] = useState()\r\n    const [performanceKind, setPerformanceKind] = useState()\r\n    const [apiError, setApiError] = useState(false)\r\n    /**\r\n     * Get user data\r\n     */\r\n    const getUser = () => {\r\n        if (!mockData) fetch(`${apiUrl}/user/${currentUser}`)\r\n            .then((response => response.json()))\r\n            .then(data => setUser(data.data))\r\n            .catch((error) => setApiError(true))\r\n        else setUser(usersMocked.find((item) => item.id === currentUser))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUser()\r\n        console.log(user)\r\n    }, [])\r\n}\r\nexport default DashboardContext\r\n"]},"metadata":{},"sourceType":"module"}
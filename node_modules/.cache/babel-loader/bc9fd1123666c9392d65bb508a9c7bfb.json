{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked } from '../src/dataMocked';\n/**\r\n * @const {Number} currentUser\r\n * @const {String} apiUrl\r\n * @const {Boolean} mockData\r\n * @const {Number} simDataLoadingTime\r\n\r\nconst {currentUser, apiUrl, mockData, simDataLoadingTime} = config\r\n */\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Service() {\n  _s();\n\n  /**\r\n   * State\r\n   */\n  const [user, setUser] = useState();\n  const [activity, setActivity] = useState();\n  const [averageSessions, setAverageSessions] = useState();\n  const [performance, setPerformance] = useState();\n  const [performanceKind, setPerformanceKind] = useState();\n  const [apiError, setApiError] = useState(false);\n  const {\n    currentUser\n  } = useParams();\n  console.log(currentUser);\n  /**\r\n   * Get user data\r\n   */\n\n  const getUser = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${currentUser}`).then(response => response.json()).then(data => setUser(data.data)).catch(error => setApiError(true));else setUser(usersMocked.find(item => item.id === currentUser));\n  };\n\n  useEffect(() => {\n    getUser();\n  }, []);\n  /**\r\n   * Get user activity data\r\n   */\n\n  const getUserActivity = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${user.id}/activity`).then(response => response.json()).then(data => setActivity(data.data.sessions)).catch(error => setApiError(true));else setActivity(activitiesMocked.find(activity => activity.userId === user.id).sessions);\n  };\n  /**\r\n   * Get user average sessions data\r\n   */\n\n\n  const getUserAverageSessions = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${user.id}/average-sessions`).then(response => response.json()).then(data => setAverageSessions(data.data.sessions)).catch(error => setApiError(true));else setAverageSessions(averageSessionsMocked.find(averageSessions => averageSessions.userId === user.id).sessions);\n  };\n  /**\r\n   * Get user performance data\r\n   */\n\n\n  const getUserPerformance = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${user.id}/performance`).then(response => response.json()).then(data => {\n      setPerformance(data.data.data);\n      setPerformanceKind(data.data.kind);\n    }).catch(error => setApiError(true));else {\n      const performance = performanceMocked.find(performance => performance.userId === user.id);\n      setPerformance(performance.data);\n      setPerformanceKind(performance.kind);\n    }\n  };\n\n  useEffect(() => {\n    const getUserData = () => {\n      getUserActivity();\n      getUserAverageSessions();\n      getUserPerformance();\n    };\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: console.log(user, activity, averageSessions, performance, performanceKind, apiError)\n  }, void 0, false);\n}\n\n_s(Service, \"A7JPu79v3c9SHUGzYqfIQnsa+NQ=\", false, function () {\n  return [useParams];\n});\n\n_c = Service;\nexport default Service;\n\nvar _c;\n\n$RefreshReg$(_c, \"Service\");","map":{"version":3,"sources":["D:/fomation Openclassroom/projet12/SportSee/src/Service.js"],"names":["createContext","useEffect","useState","useParams","usersMocked","activitiesMocked","averageSessionsMocked","performanceMocked","Service","user","setUser","activity","setActivity","averageSessions","setAverageSessions","performance","setPerformance","performanceKind","setPerformanceKind","apiError","setApiError","currentUser","console","log","getUser","process","env","REACT_APP_USE_API","fetch","then","response","json","data","catch","error","find","item","id","getUserActivity","sessions","userId","getUserAverageSessions","getUserPerformance","kind","getUserData"],"mappings":"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","sourcesContent":["import {createContext, useEffect , useState} from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport {usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked} from '../src/dataMocked'\r\n\r\n/**\r\n * @const {Number} currentUser\r\n * @const {String} apiUrl\r\n * @const {Boolean} mockData\r\n * @const {Number} simDataLoadingTime\r\n\r\nconst {currentUser, apiUrl, mockData, simDataLoadingTime} = config\r\n */\r\n\r\n function Service() {\r\n\r\n    /**\r\n     * State\r\n     */\r\n    const [user, setUser] = useState()\r\n    const [activity, setActivity] = useState()\r\n    const [averageSessions, setAverageSessions] = useState()\r\n    const [performance, setPerformance] = useState()\r\n    const [performanceKind, setPerformanceKind] = useState()\r\n    const [apiError, setApiError] = useState(false)\r\n    const { currentUser} = useParams()\r\n    console.log(currentUser)\r\n    /**\r\n     * Get user data\r\n     */\r\n    const getUser = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${currentUser}`)\r\n            .then((response => response.json()))\r\n            .then(data => setUser(data.data))\r\n            .catch((error) => setApiError(true))\r\n        else setUser(usersMocked.find((item) => item.id === currentUser))\r\n    }\r\n\r\n    useEffect(() => {\r\n         getUser()\r\n    }, [])\r\n\r\n    /**\r\n     * Get user activity data\r\n     */\r\n    const getUserActivity = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${user.id}/activity`)\r\n            .then((response => response.json()))\r\n            .then(data => setActivity(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setActivity(activitiesMocked.find((activity) => activity.userId === user.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user average sessions data\r\n     */\r\n    const getUserAverageSessions = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${user.id}/average-sessions`)\r\n            .then((response => response.json()))\r\n            .then(data => setAverageSessions(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setAverageSessions(averageSessionsMocked.find((averageSessions) => averageSessions.userId === user.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user performance data\r\n     */\r\n    const getUserPerformance = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`process.env.REACT_APP_API_URL/${user.id}/performance`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setPerformance(data.data.data)\r\n                setPerformanceKind(data.data.kind)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else {\r\n            const performance = performanceMocked.find((performance) => performance.userId === user.id)\r\n            setPerformance(performance.data)\r\n            setPerformanceKind(performance.kind)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getUserData = () => {\r\n            getUserActivity()\r\n            getUserAverageSessions()\r\n            getUserPerformance()\r\n        }\r\n    }, [user])\r\n\r\n    return (\r\n\r\n        <>\r\n            { console.log(user, activity, averageSessions, performance, performanceKind, apiError)}\r\n\r\n        </>\r\n    )\r\n}\r\nexport default Service;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked } from '../src/dataMocked';\n\nfunction Service() {\n  _s();\n\n  /**\r\n   * State\r\n   */\n  const [user, setUser] = useState();\n  const [activity, setActivity] = useState();\n  const [averageSessions, setAverageSessions] = useState();\n  const [performance, setPerformance] = useState();\n  const [performanceKind, setPerformanceKind] = useState();\n  const [apiError, setApiError] = useState(false);\n  const params = useParams();\n  console.log(params.id);\n  /**\r\n   * Get user data\r\n   */\n\n  const getUser = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}`).then(response => response.json()).then(data => {\n      setUser(data.data);\n    }).catch(error => setApiError(true));else setUser(usersMocked.find(item => item.id === params.id));\n  };\n  /*\r\n      useEffect(() => {\r\n           getUser()\r\n      }, [])\r\n  */\n\n  /**\r\n   * Get user activity data\r\n   */\n\n\n  const getUserActivity = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/activity`).then(response => response.json()).then(data => setActivity(data.data.sessions)).catch(error => setApiError(true));else setActivity(activitiesMocked.find(activity => activity.userId === params.id).sessions);\n  };\n  /**\r\n   * Get user average sessions data\r\n   */\n\n\n  const getUserAverageSessions = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/average-sessions`).then(response => response.json()).then(data => setAverageSessions(data.data.sessions)).catch(error => setApiError(true));else setAverageSessions(averageSessionsMocked.find(averageSessions => averageSessions.userId === params.id).sessions);\n  };\n  /**\r\n   * Get user performance data\r\n   */\n\n\n  const getUserPerformance = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/performance`).then(response => response.json()).then(data => {\n      setPerformance(data.data.data);\n      setPerformanceKind(data.data.kind);\n    }).catch(error => setApiError(true));else {\n      const performance = performanceMocked.find(performance => performance.userId === params.id);\n      setPerformance(performance.data);\n      setPerformanceKind(performance.kind);\n    }\n  };\n  /*useEffect(() => {\r\n          getUserActivity()\r\n          getUserAverageSessions()\r\n          getUserPerformance()\r\n  }, [])*/\n\n\n  console.log(user, activity, averageSessions, performance, performanceKind, apiError);\n}\n\n_s(Service, \"/haNLXNxfGDBXGoxqDDHWI3gofc=\", false, function () {\n  return [useParams];\n});\n\n_c = Service;\nexport default Service;\n\nvar _c;\n\n$RefreshReg$(_c, \"Service\");","map":{"version":3,"sources":["D:/fomation Openclassroom/projet12/SportSee/src/Service.js"],"names":["useEffect","useState","useParams","usersMocked","activitiesMocked","averageSessionsMocked","performanceMocked","Service","user","setUser","activity","setActivity","averageSessions","setAverageSessions","performance","setPerformance","performanceKind","setPerformanceKind","apiError","setApiError","params","console","log","id","getUser","process","env","REACT_APP_USE_API","fetch","then","response","json","data","catch","error","find","item","getUserActivity","sessions","userId","getUserAverageSessions","getUserPerformance","kind"],"mappings":"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","sourcesContent":["import {useEffect , useState} from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport {usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked} from '../src/dataMocked'\r\n\r\n\r\n function Service() {\r\n\r\n    /**\r\n     * State\r\n     */\r\n    const [user, setUser] = useState()\r\n    const [activity, setActivity] = useState()\r\n    const [averageSessions, setAverageSessions] = useState()\r\n    const [performance, setPerformance] = useState()\r\n    const [performanceKind, setPerformanceKind] = useState()\r\n    const [apiError, setApiError] = useState(false)\r\n    const params = useParams()\r\n    console.log(params.id)\r\n    /**\r\n     * Get user data\r\n     */\r\n    const getUser = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setUser(data.data)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else setUser(usersMocked.find((item) => item.id === params.id))\r\n    }\r\n/*\r\n    useEffect(() => {\r\n         getUser()\r\n    }, [])\r\n*/\r\n    /**\r\n     * Get user activity data\r\n     */\r\n    const getUserActivity = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/activity`)\r\n            .then((response => response.json()))\r\n            .then(data => setActivity(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setActivity(activitiesMocked.find((activity) => activity.userId === params.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user average sessions data\r\n     */\r\n    const getUserAverageSessions = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/average-sessions`)\r\n            .then((response => response.json()))\r\n            .then(data => setAverageSessions(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setAverageSessions(averageSessionsMocked.find((averageSessions) => averageSessions.userId === params.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user performance data\r\n     */\r\n    const getUserPerformance = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/performance`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setPerformance(data.data.data)\r\n                setPerformanceKind(data.data.kind)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else {\r\n            const performance = performanceMocked.find((performance) => performance.userId === params.id)\r\n            setPerformance(performance.data)\r\n            setPerformanceKind(performance.kind)\r\n        }\r\n    }\r\n\r\n    /*useEffect(() => {\r\n            getUserActivity()\r\n            getUserAverageSessions()\r\n            getUserPerformance()\r\n    }, [])*/\r\n     console.log(user, activity, averageSessions, performance, performanceKind, apiError)\r\n\r\n}\r\nexport default Service;\r\n"]},"metadata":{},"sourceType":"module"}
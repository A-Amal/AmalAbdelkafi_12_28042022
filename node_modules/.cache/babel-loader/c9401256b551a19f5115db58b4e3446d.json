{"ast":null,"code":"var _jsxFileName = \"D:\\\\fomation Openclassroom\\\\projet12\\\\SportSee\\\\src\\\\dashboardContext.js\",\n    _s = $RefreshSig$();\n\n//const {currentUser, apiUrl, mockData, simDataLoadingTime} = config\nimport { createContext, useEffect, useState } from \"react\";\nimport { USER_MAIN_DATA as usersMocked, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../src/dataMocked';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockData = false;\nlet currentUser = 12;\nlet apiUrl;\n/**\r\n * Context\r\n */\n\nexport const DashboardContext = /*#__PURE__*/createContext();\n\nfunction DashboardContextProvider() {\n  _s();\n\n  /**\r\n   * State\r\n   */\n  const [user, setUser] = useState(12);\n  const [activity, setActivity] = useState();\n  const [averageSessions, setAverageSessions] = useState();\n  const [performance, setPerformance] = useState();\n  const [performanceKind, setPerformanceKind] = useState();\n  const [apiError, setApiError] = useState(false);\n  /**\r\n   * Get user data\r\n   */\n\n  const getUser = () => {\n    /*\r\n    if (!mockData) fetch(`${apiUrl}/user/${currentUser}`)\r\n        .then((response => response.json()))\r\n        .then(data => setUser(data.data))\r\n        .catch((error) => setApiError(true))\r\n    else {\r\n        setUser(usersMocked.find((item) => item.id === currentUser))\r\n        console.log(user)\r\n    }*/\n    setUser(usersMocked.find(item => item.id === currentUser));\n    console.log(user);\n  };\n\n  useEffect(() => {\n    getUser();\n    console.log(user);\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(DashboardContext.Provider, {\n    value: {\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DashboardContextProvider, \"E5U1RzC/uqN0Oc9unWyqOAtKEp4=\");\n\n_c = DashboardContextProvider;\nexport default DashboardContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardContextProvider\");","map":{"version":3,"sources":["D:/fomation Openclassroom/projet12/SportSee/src/dashboardContext.js"],"names":["createContext","useEffect","useState","USER_MAIN_DATA","usersMocked","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","mockData","currentUser","apiUrl","DashboardContext","DashboardContextProvider","user","setUser","activity","setActivity","averageSessions","setAverageSessions","performance","setPerformance","performanceKind","setPerformanceKind","apiError","setApiError","getUser","find","item","id","console","log","children"],"mappings":";;;AAAA;AACA,SAAQA,aAAR,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,cAAc,IAAIC,WAA1B,EAAuCC,aAAvC,EAAsDC,qBAAtD,EAA6EC,gBAA7E,QAAqG,mBAArG;;AAEA,MAAMC,QAAQ,GAAG,KAAjB;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,MAAJ;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,gBAAGX,aAAa,EAAtC;;AACP,SAASY,wBAAT,GAAoC;AAAA;;AAChC;AACJ;AACA;AACI,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,EAAxC;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,EAAtD;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,EAA9C;AACA,QAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,EAAtD;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,KAAD,CAAxC;AACA;AACJ;AACA;;AACI,QAAMuB,OAAO,GAAG,MAAM;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQX,IAAAA,OAAO,CAACV,WAAW,CAACsB,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYnB,WAAvC,CAAD,CAAP;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACH,GAZD;;AAcAZ,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,OAAO;AACPI,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACH,GAHQ,EAGN,CAACA,IAAD,CAHM,CAAT;AAIA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAACA,MAAAA;AAAD,KAAlC;AAAA,cACKkB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GApCQnB,wB;;KAAAA,wB;AAqCT,eAAeD,gBAAf","sourcesContent":["//const {currentUser, apiUrl, mockData, simDataLoadingTime} = config\r\nimport {createContext, useEffect, useState} from \"react\";\r\nimport {USER_MAIN_DATA as usersMocked, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../src/dataMocked'\r\n\r\nconst mockData = false;\r\nlet currentUser = 12;\r\nlet apiUrl;\r\n/**\r\n * Context\r\n */\r\nexport const DashboardContext = createContext()\r\nfunction DashboardContextProvider() {\r\n    /**\r\n     * State\r\n     */\r\n    const [user, setUser] = useState(12)\r\n    const [activity, setActivity] = useState()\r\n    const [averageSessions, setAverageSessions] = useState()\r\n    const [performance, setPerformance] = useState()\r\n    const [performanceKind, setPerformanceKind] = useState()\r\n    const [apiError, setApiError] = useState(false)\r\n    /**\r\n     * Get user data\r\n     */\r\n    const getUser = () => {\r\n        /*\r\n        if (!mockData) fetch(`${apiUrl}/user/${currentUser}`)\r\n            .then((response => response.json()))\r\n            .then(data => setUser(data.data))\r\n            .catch((error) => setApiError(true))\r\n        else {\r\n            setUser(usersMocked.find((item) => item.id === currentUser))\r\n            console.log(user)\r\n        }*/\r\n        setUser(usersMocked.find((item) => item.id === currentUser))\r\n        console.log(user)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUser()\r\n        console.log(user)\r\n    }, [user])\r\n    return (\r\n        <DashboardContext.Provider value={{user}}>\r\n            {children}\r\n        </DashboardContext.Provider>\r\n    )\r\n}\r\nexport default DashboardContext\r\n"]},"metadata":{},"sourceType":"module"}
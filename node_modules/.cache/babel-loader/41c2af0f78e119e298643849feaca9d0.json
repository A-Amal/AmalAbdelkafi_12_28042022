{"ast":null,"code":"var _jsxFileName = \"D:\\\\fomation Openclassroom\\\\projet12\\\\SportSee\\\\src\\\\components\\\\Score.js\";\nimport { PieChart, Cell, Legend, Pie } from \"recharts\";\nimport '../styles/Score.css';\nimport * as propTypes from \"prop-types\";\n/**\r\n * Show score\r\n * @param {Object} params\r\n * @param {Number} params.data\r\n * @return {JSX.Element}\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Score(_ref) {\n  let {\n    data\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"chart-title-score\",\n      children: \"Score\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n      width: 260,\n      height: 160,\n      children: [/*#__PURE__*/_jsxDEV(Pie, {\n        cx: '50%',\n        cy: '50%',\n        startAngle: 90,\n        endAngle: 450,\n        innerRadius: '85%',\n        outerRadius: '100%',\n        cornerRadius: '50%',\n        dataKey: \"value\",\n        data: [{\n          name: 'score',\n          value: data\n        }, {\n          name: 'total',\n          value: 1 - data\n        }],\n        children: [/*#__PURE__*/_jsxDEV(Cell, {\n          fill: \"#E60000\",\n          stroke: \"#E60000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Cell, {\n          fill: \"transparent\",\n          stroke: \"transparent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Pie, {\n        cx: '50%',\n        cy: '50%',\n        outerRadius: '85%',\n        fill: \"#FFFFFF\",\n        data: [{\n          name: 'ring',\n          value: 100\n        }],\n        dataKey: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {\n        verticalAlign: \"middle\",\n        align: \"center\",\n        content: CustomLegend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_c = Score;\nexport default Score;\n/**\r\n * Show custom legend\r\n * @param {Object} params\r\n * @param {Array} params.payload\r\n * @return {JSX.Element}\r\n */\n\nconst CustomLegend = _ref2 => {\n  let {\n    payload\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-legend-score\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-legend-score-1\",\n      children: [payload[0].payload.value * 100, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-legend-score-2\",\n      children: \"de votre objectif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}; // Props types\n\n\n_c2 = CustomLegend;\nScore.propTypes = {\n  data: propTypes.number.isRequired\n};\nCustomLegend.propTypes = {\n  payload: propTypes.array\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Score\");\n$RefreshReg$(_c2, \"CustomLegend\");","map":{"version":3,"sources":["D:/fomation Openclassroom/projet12/SportSee/src/components/Score.js"],"names":["PieChart","Cell","Legend","Pie","propTypes","Score","data","name","value","CustomLegend","payload","number","isRequired","array"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgCC,GAAhC,QAA0C,UAA1C;AACA,OAAO,qBAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,SAASC,KAAT,OAAuB;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AACnB,sBACI;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAE,GAAjB;AACU,MAAA,MAAM,EAAE,GADlB;AAAA,8BAGI,QAAC,GAAD;AACI,QAAA,EAAE,EAAE,KADR;AACe,QAAA,EAAE,EAAE,KADnB;AAEI,QAAA,UAAU,EAAE,EAFhB;AAEoB,QAAA,QAAQ,EAAE,GAF9B;AAGI,QAAA,WAAW,EAAE,KAHjB;AAGwB,QAAA,WAAW,EAAE,MAHrC;AAII,QAAA,YAAY,EAAE,KAJlB;AAKI,QAAA,OAAO,EAAC,OALZ;AAMI,QAAA,IAAI,EAAE,CAAC;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,KAAK,EAAEF;AAAvB,SAAD,EAA+B;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,KAAK,EAAE,IAAIF;AAA3B,SAA/B,CANV;AAAA,gCAQI,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,SAAX;AAAqB,UAAA,MAAM,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,aAAX;AAAyB,UAAA,MAAM,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAcI,QAAC,GAAD;AACI,QAAA,EAAE,EAAE,KADR;AACe,QAAA,EAAE,EAAE,KADnB;AAEI,QAAA,WAAW,EAAE,KAFjB;AAGI,QAAA,IAAI,EAAC,SAHT;AAII,QAAA,IAAI,EAAE,CAAC;AAACC,UAAAA,IAAI,EAAE,MAAP;AAAeC,UAAAA,KAAK,EAAE;AAAtB,SAAD,CAJV;AAKI,QAAA,OAAO,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,cAdJ,eAqBI,QAAC,MAAD;AACI,QAAA,aAAa,EAAC,QADlB;AAEI,QAAA,KAAK,EAAC,QAFV;AAGI,QAAA,OAAO,EAAEC;AAHb;AAAA;AAAA;AAAA;AAAA,cArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAkCH;;KAnCQJ,K;AAqCT,eAAeA,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMI,YAAY,GAAG;AAAA,MAAC;AAACC,IAAAA;AAAD,GAAD;AAAA,sBACjB;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,iBAAuCA,OAAO,CAAC,CAAD,CAAP,CAAWA,OAAX,CAAmBF,KAAnB,GAA2B,GAAlE;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADiB;AAAA,CAArB,C,CAOA;;;MAPMC,Y;AAQNJ,KAAK,CAACD,SAAN,GAAkB;AACdE,EAAAA,IAAI,EAAEF,SAAS,CAACO,MAAV,CAAiBC;AADT,CAAlB;AAGAH,YAAY,CAACL,SAAb,GAAyB;AACrBM,EAAAA,OAAO,EAAEN,SAAS,CAACS;AADE,CAAzB","sourcesContent":["import {PieChart, Cell, Legend, Pie} from \"recharts\";\r\nimport '../styles/Score.css'\r\nimport * as propTypes from \"prop-types\";\r\n\r\n\r\n/**\r\n * Show score\r\n * @param {Object} params\r\n * @param {Number} params.data\r\n * @return {JSX.Element}\r\n */\r\nfunction Score({data}) {\r\n    return (\r\n        <>\r\n            <h2 className=\"chart-title-score\">Score</h2>\r\n\r\n            <PieChart width={260}\r\n                      height={160}\r\n            >\r\n                <Pie\r\n                    cx={'50%'} cy={'50%'}\r\n                    startAngle={90} endAngle={450}\r\n                    innerRadius={'85%'} outerRadius={'100%'}\r\n                    cornerRadius={'50%'}\r\n                    dataKey=\"value\"\r\n                    data={[{name: 'score', value: data}, {name: 'total', value: 1 - data}]}\r\n                >\r\n                    <Cell fill=\"#E60000\" stroke=\"#E60000\"/>\r\n                    <Cell fill=\"transparent\" stroke=\"transparent\"/>\r\n                </Pie>\r\n                <Pie\r\n                    cx={'50%'} cy={'50%'}\r\n                    outerRadius={'85%'}\r\n                    fill=\"#FFFFFF\"\r\n                    data={[{name: 'ring', value: 100}]}\r\n                    dataKey=\"value\"\r\n                />\r\n                <Legend\r\n                    verticalAlign=\"middle\"\r\n                    align=\"center\"\r\n                    content={CustomLegend}\r\n                />\r\n            </PieChart>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Score\r\n\r\n/**\r\n * Show custom legend\r\n * @param {Object} params\r\n * @param {Array} params.payload\r\n * @return {JSX.Element}\r\n */\r\nconst CustomLegend = ({payload}) => (\r\n    <div className=\"chart-legend-score\">\r\n        <div className=\"chart-legend-score-1\">{payload[0].payload.value * 100}%</div>\r\n        <div className=\"chart-legend-score-2\">de votre objectif</div>\r\n    </div>\r\n)\r\n\r\n// Props types\r\nScore.propTypes = {\r\n    data: propTypes.number.isRequired,\r\n}\r\nCustomLegend.propTypes = {\r\n    payload: propTypes.array,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
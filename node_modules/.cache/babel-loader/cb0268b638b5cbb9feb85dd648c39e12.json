{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked } from '../src/dataMocked'; //function Service() {\n\n/**\r\n * State\r\n */\n// const [user, setUser] = useState()\n// const [activity, setActivity] = useState()\n// const [averageSessions, setAverageSessions] = useState()\n//  const [performance, setPerformance] = useState()\n//  const [performanceKind, setPerformanceKind] = useState()\n//  const [apiError, setApiError] = useState(false)\n//const params = useParams()\n//console.log(params.id)\n\n/**\r\n * Get user data\r\n */\n\nexport const getUser = () => {\n  //const params = useParams()\n  if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}`).then(response => response.json()).then(data => {\n    setUser(data.data);\n  }).catch(error => setApiError(true));else setUser(usersMocked.find(item => item.id === params.id));\n  return fetch(`http://localhost:3000/user/${params.id}`).then(response => response.json());\n};\n/*\r\n    useEffect(() => {\r\n         getUser()\r\n    }, [])\r\n*/\n\n/**\r\n * Get user activity data\r\n */\n\n/*\r\nconst getUserActivity = () => {\r\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/activity`)\r\n        .then((response => response.json()))\r\n        .then(data => setActivity(data.data.sessions))\r\n        .catch((error) => setApiError(true))\r\n    else setActivity(activitiesMocked.find((activity) => activity.userId === params.id).sessions)\r\n}\r\n  /**\r\n * Get user average sessions data\r\n */\n\n/*\r\n    const getUserAverageSessions = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/average-sessions`)\r\n            .then((response => response.json()))\r\n            .then(data => setAverageSessions(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setAverageSessions(averageSessionsMocked.find((averageSessions) => averageSessions.userId === params.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user performance data\r\n     */\n\n/*\r\n    const getUserPerformance = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/performance`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setPerformance(data.data.data)\r\n                setPerformanceKind(data.data.kind)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else {\r\n            const performance = performanceMocked.find((performance) => performance.userId === params.id)\r\n            setPerformance(performance.data)\r\n            setPerformanceKind(performance.kind)\r\n        }\r\n    }\r\n/*\r\n    useEffect(() => {\r\n            getUserActivity()\r\n            getUserAverageSessions()\r\n            getUserPerformance()\r\n    }, [])\r\n     console.log(user, activity, averageSessions, performance, performanceKind, apiError)\r\n*/\n//}\n//export default Service;","map":{"version":3,"sources":["D:/fomation Openclassroom/projet12/SportSee/src/Service.js"],"names":["useEffect","useState","useParams","usersMocked","activitiesMocked","averageSessionsMocked","performanceMocked","getUser","process","env","REACT_APP_USE_API","fetch","params","id","then","response","json","data","setUser","catch","error","setApiError","find","item"],"mappings":"AAAA,SAAQA,SAAR,EAAoBC,QAApB,QAAmC,OAAnC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAAQC,WAAR,EAAqBC,gBAArB,EAAuCC,qBAAvC,EAA8DC,iBAA9D,QAAsF,mBAAtF,C,CAGC;;AAEG;AACJ;AACA;AACG;AACA;AACA;AACD;AACA;AACA;AACE;AACA;;AACA;AACJ;AACA;;AACE,OAAO,MAAMC,OAAO,GAAG,MAAM;AACvB;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,iBAAhB,EAAmCC,KAAK,CAAE,8BAA6BC,MAAM,CAACC,EAAG,EAAzC,CAAL,CAC9BC,IAD8B,CACxBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADY,EAE9BF,IAF8B,CAEzBG,IAAI,IAAI;AACVC,IAAAA,OAAO,CAACD,IAAI,CAACA,IAAN,CAAP;AACH,GAJ8B,EAK9BE,KAL8B,CAKvBC,KAAD,IAAWC,WAAW,CAAC,IAAD,CALE,EAAnC,KAMKH,OAAO,CAACf,WAAW,CAACmB,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACV,EAAL,KAAYD,MAAM,CAACC,EAA9C,CAAD,CAAP;AACL,SAAOF,KAAK,CAAE,8BAA6BC,MAAM,CAACC,EAAG,EAAzC,CAAL,CACFC,IADE,CACIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADhB,CAAP;AAEH,CAXI;AAYT;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {useEffect , useState} from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport {usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked} from '../src/dataMocked'\r\n\r\n\r\n //function Service() {\r\n\r\n    /**\r\n     * State\r\n     */\r\n   // const [user, setUser] = useState()\r\n   // const [activity, setActivity] = useState()\r\n   // const [averageSessions, setAverageSessions] = useState()\r\n  //  const [performance, setPerformance] = useState()\r\n  //  const [performanceKind, setPerformanceKind] = useState()\r\n  //  const [apiError, setApiError] = useState(false)\r\n    //const params = useParams()\r\n    //console.log(params.id)\r\n    /**\r\n     * Get user data\r\n     */\r\n  export const getUser = () => {\r\n        //const params = useParams()\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setUser(data.data)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else setUser(usersMocked.find((item) => item.id === params.id))\r\n        return fetch(`http://localhost:3000/user/${params.id}`)\r\n            .then((response => response.json()))\r\n    }\r\n/*\r\n    useEffect(() => {\r\n         getUser()\r\n    }, [])\r\n*/\r\n    /**\r\n     * Get user activity data\r\n     */\r\n    /*\r\n    const getUserActivity = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/activity`)\r\n            .then((response => response.json()))\r\n            .then(data => setActivity(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setActivity(activitiesMocked.find((activity) => activity.userId === params.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user average sessions data\r\n     */\r\n/*\r\n    const getUserAverageSessions = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/average-sessions`)\r\n            .then((response => response.json()))\r\n            .then(data => setAverageSessions(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setAverageSessions(averageSessionsMocked.find((averageSessions) => averageSessions.userId === params.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user performance data\r\n     */\r\n/*\r\n    const getUserPerformance = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/performance`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setPerformance(data.data.data)\r\n                setPerformanceKind(data.data.kind)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else {\r\n            const performance = performanceMocked.find((performance) => performance.userId === params.id)\r\n            setPerformance(performance.data)\r\n            setPerformanceKind(performance.kind)\r\n        }\r\n    }\r\n/*\r\n    useEffect(() => {\r\n            getUserActivity()\r\n            getUserAverageSessions()\r\n            getUserPerformance()\r\n    }, [])\r\n     console.log(user, activity, averageSessions, performance, performanceKind, apiError)\r\n*/\r\n//}\r\n//export default Service;\r\n"]},"metadata":{},"sourceType":"module"}
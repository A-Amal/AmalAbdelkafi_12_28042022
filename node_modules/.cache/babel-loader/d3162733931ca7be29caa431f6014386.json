{"ast":null,"code":"var _jsxFileName = \"D:\\\\fomation Openclassroom\\\\projet12\\\\SportSee\\\\src\\\\Service.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked } from '../src/dataMocked';\n/**\r\n * Context\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DashboardContext = /*#__PURE__*/createContext();\n\nfunction Service() {\n  _s();\n\n  /**\r\n   * State\r\n   */\n  const [user, setUser] = useState();\n  const [activity, setActivity] = useState();\n  const [averageSessions, setAverageSessions] = useState();\n  const [performance, setPerformance] = useState();\n  const [performanceKind, setPerformanceKind] = useState();\n  const [apiError, setApiError] = useState(false);\n  const params = useParams();\n  console.log(params.id);\n  /**\r\n   * Get user data\r\n   */\n\n  const getUser = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}`).then(response => response.json()).then(data => {\n      setUser(data.data);\n    }).catch(error => setApiError(true));else setUser(usersMocked.find(item => item.id === params.id));\n  };\n\n  useEffect(() => {\n    getUser();\n  }, []);\n  /**\r\n   * Get user activity data\r\n   */\n\n  const getUserActivity = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/activity`).then(response => response.json()).then(data => setActivity(data.data.sessions)).catch(error => setApiError(true));else setActivity(activitiesMocked.find(activity => activity.userId === params.id).sessions);\n  };\n  /**\r\n   * Get user average sessions data\r\n   */\n\n\n  const getUserAverageSessions = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/average-sessions`).then(response => response.json()).then(data => setAverageSessions(data.data.sessions)).catch(error => setApiError(true));else setAverageSessions(averageSessionsMocked.find(averageSessions => averageSessions.userId === params.id).sessions);\n  };\n  /**\r\n   * Get user performance data\r\n   */\n\n\n  const getUserPerformance = () => {\n    if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/performance`).then(response => response.json()).then(data => {\n      setPerformance(data.data.data);\n      setPerformanceKind(data.data.kind);\n    }).catch(error => setApiError(true));else {\n      const performance = performanceMocked.find(performance => performance.userId === params.id);\n      setPerformance(performance.data);\n      setPerformanceKind(performance.kind);\n    }\n  };\n\n  useEffect(() => {\n    getUserActivity();\n    getUserAverageSessions();\n    getUserPerformance();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(user, activity, averageSessions, performance, performanceKind, apiError), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: apiError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Service, \"Zg8Yq7cFKueO4uAf9s57o8B7y4w=\", false, function () {\n  return [useParams];\n});\n\n_c = Service;\nexport default Service;\n\nvar _c;\n\n$RefreshReg$(_c, \"Service\");","map":{"version":3,"sources":["D:/fomation Openclassroom/projet12/SportSee/src/Service.js"],"names":["createContext","useEffect","useState","useParams","usersMocked","activitiesMocked","averageSessionsMocked","performanceMocked","DashboardContext","Service","user","setUser","activity","setActivity","averageSessions","setAverageSessions","performance","setPerformance","performanceKind","setPerformanceKind","apiError","setApiError","params","console","log","id","getUser","process","env","REACT_APP_USE_API","fetch","then","response","json","data","catch","error","find","item","getUserActivity","sessions","userId","getUserAverageSessions","getUserPerformance","kind"],"mappings":"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","sourcesContent":["import {createContext, useEffect, useState} from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport {usersMocked, activitiesMocked, averageSessionsMocked, performanceMocked} from '../src/dataMocked'\r\n/**\r\n * Context\r\n */\r\nexport const DashboardContext = createContext()\r\n\r\n function Service() {\r\n\r\n    /**\r\n     * State\r\n     */\r\n    const [user, setUser] = useState()\r\n    const [activity, setActivity] = useState()\r\n    const [averageSessions, setAverageSessions] = useState()\r\n    const [performance, setPerformance] = useState()\r\n    const [performanceKind, setPerformanceKind] = useState()\r\n    const [apiError, setApiError] = useState(false)\r\n    const params = useParams()\r\n    console.log(params.id)\r\n    /**\r\n     * Get user data\r\n     */\r\n    const getUser = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setUser(data.data)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else setUser(usersMocked.find((item) => item.id === params.id))\r\n    }\r\n\r\n    useEffect(() => {\r\n         getUser()\r\n    }, [])\r\n\r\n    /**\r\n     * Get user activity data\r\n     */\r\n    const getUserActivity = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/activity`)\r\n            .then((response => response.json()))\r\n            .then(data => setActivity(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setActivity(activitiesMocked.find((activity) => activity.userId === params.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user average sessions data\r\n     */\r\n    const getUserAverageSessions = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/average-sessions`)\r\n            .then((response => response.json()))\r\n            .then(data => setAverageSessions(data.data.sessions))\r\n            .catch((error) => setApiError(true))\r\n        else setAverageSessions(averageSessionsMocked.find((averageSessions) => averageSessions.userId === params.id).sessions)\r\n    }\r\n\r\n    /**\r\n     * Get user performance data\r\n     */\r\n    const getUserPerformance = () => {\r\n        if (process.env.REACT_APP_USE_API) fetch(`http://localhost:3000/user/${params.id}/performance`)\r\n            .then((response => response.json()))\r\n            .then(data => {\r\n                setPerformance(data.data.data)\r\n                setPerformanceKind(data.data.kind)\r\n            })\r\n            .catch((error) => setApiError(true))\r\n        else {\r\n            const performance = performanceMocked.find((performance) => performance.userId === params.id)\r\n            setPerformance(performance.data)\r\n            setPerformanceKind(performance.kind)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n            getUserActivity()\r\n            getUserAverageSessions()\r\n            getUserPerformance()\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <>\r\n            { console.log(user, activity, averageSessions, performance, performanceKind, apiError)}\r\n\r\n\r\n            <p>{apiError}</p>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default Service;\r\n"]},"metadata":{},"sourceType":"module"}